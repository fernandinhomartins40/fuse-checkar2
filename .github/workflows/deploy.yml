name: 🚀 Deploy Fuse Checkar2

# Controle de concorrência
concurrency:
  group: fuse-checkar2-deploy
  cancel-in-progress: true

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      full_reinstall:
        description: 'Reinstalação completa (true/false)'
        required: false
        default: 'false'

env:
  VPS_HOST: '31.97.85.98'
  VPS_USER: 'root'
  DEPLOY_DIR: '/opt/fuse-checkar2'
  APP_NAME: 'fuse-checkar2'

jobs:
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: 📋 Informações do Deploy
      run: |
        echo "🚀 DEPLOY FUSE CHECKAR2"
        echo "====================="
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Reinstalação completa: ${{ github.event.inputs.full_reinstall || 'false' }}"
        echo "VPS: ${{ env.VPS_HOST }}"
        echo "====================="

    - name: 🔑 Configurar SSH
      run: |
        echo "🔑 Configurando SSH..."
        sudo apt-get update && sudo apt-get install -y sshpass
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: 🔍 Verificar Estado da VPS
      id: vps-check
      run: |
        echo "🔍 Verificando estado da VPS..."
        
        NEEDS_INSTALL="false"
        APP_RUNNING="false"
        
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          echo '=== Verificando Sistema ==='
          
          # Verificar dependências críticas
          MISSING=''
          if ! command -v docker >/dev/null 2>&1; then
            echo '❌ Docker: NÃO INSTALADO'
            MISSING=\"docker \$MISSING\"
          else
            echo \"✅ Docker: \$(docker --version | cut -d' ' -f1-3)\"
          fi
          
          if ! command -v docker-compose >/dev/null 2>&1 && ! docker compose version >/dev/null 2>&1; then
            echo '❌ Docker Compose: NÃO INSTALADO'
            MISSING=\"compose \$MISSING\"
          else
            echo '✅ Docker Compose: INSTALADO'
          fi
          
          if ! command -v nginx >/dev/null 2>&1; then
            echo '❌ Nginx: NÃO INSTALADO'
            MISSING=\"nginx \$MISSING\"
          else
            echo '✅ Nginx: INSTALADO'
          fi
          
          # Verificar diretório e aplicação
          if [ ! -d '${{ env.DEPLOY_DIR }}' ]; then
            echo '❌ Diretório da aplicação: NÃO EXISTE'
            MISSING=\"dir \$MISSING\"
          else
            echo '✅ Diretório da aplicação: EXISTE'
            
            # Verificar se container está rodando
            if docker ps | grep -q '${{ env.APP_NAME }}-app'; then
              echo '✅ Container: RODANDO'
              APP_RUNNING='true'
            else
              echo '❌ Container: NÃO RODANDO'
            fi
            
            # Verificar se imagem existe
            if docker images | grep -q '${{ env.APP_NAME }}'; then
              echo '✅ Imagem Docker: EXISTE'
            else
              echo '❌ Imagem Docker: NÃO EXISTE'
              MISSING=\"image \$MISSING\"
            fi
          fi
          
          if [ -n \"\$MISSING\" ]; then
            echo \"NEEDS_INSTALL=true\" > /tmp/deploy_status.txt
          else
            echo \"NEEDS_INSTALL=false\" > /tmp/deploy_status.txt
          fi
          
          echo \"APP_RUNNING=\$APP_RUNNING\" >> /tmp/deploy_status.txt
          echo \"MISSING=\$MISSING\" >> /tmp/deploy_status.txt
        "
        
        # Capturar resultados
        NEEDS_INSTALL=$(sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "grep NEEDS_INSTALL /tmp/deploy_status.txt | cut -d'=' -f2" 2>/dev/null || echo "true")
        APP_RUNNING=$(sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "grep APP_RUNNING /tmp/deploy_status.txt | cut -d'=' -f2" 2>/dev/null || echo "false")
        
        echo "needs_install=$NEEDS_INSTALL" >> $GITHUB_OUTPUT
        echo "app_running=$APP_RUNNING" >> $GITHUB_OUTPUT
        
        echo "🏁 Precisa instalação: $NEEDS_INSTALL"
        echo "🏁 App rodando: $APP_RUNNING"

    - name: 🛠️ Instalação do Sistema (se necessária)
      if: steps.vps-check.outputs.needs_install == 'true' || github.event.inputs.full_reinstall == 'true'
      run: |
        echo "🛠️ Instalando dependências do sistema..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          set -e
          export DEBIAN_FRONTEND=noninteractive
          
          # Função para aguardar liberação do apt lock
          wait_for_apt_lock() {
            echo '⏳ Aguardando liberação do apt lock...'
            local max_attempts=30
            local attempt=1
            
            while [ \$attempt -le \$max_attempts ]; do
              if ! lsof /var/lib/dpkg/lock-frontend >/dev/null 2>&1 && ! pgrep -x unattended-upgr >/dev/null 2>&1; then
                echo '✅ Apt lock liberado!'
                return 0
              fi
              
              echo \"Tentativa \$attempt/\$max_attempts - Aguardando unattended-upgrades terminar...\"
              sleep 10
              attempt=\$((attempt + 1))
            done
            
            echo '⚠️ Timeout aguardando apt lock - forçando liberação...'
            systemctl stop unattended-upgrades.service || true
            killall unattended-upgr 2>/dev/null || true
            rm -f /var/lib/dpkg/lock-frontend /var/lib/dpkg/lock /var/cache/apt/archives/lock || true
            dpkg --configure -a || true
            return 0
          }
          
          # Aguardar liberação do lock antes de continuar
          wait_for_apt_lock
          
          echo '📦 Atualizando sistema...'
          apt-get update -y
          apt-get install -y curl wget gnupg2 software-properties-common build-essential jq htop ufw git
          
          # Docker
          if ! command -v docker >/dev/null 2>&1; then
            echo '🐳 Instalando Docker...'
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            systemctl start docker
            systemctl enable docker
            rm get-docker.sh
            
            # Adicionar usuário ao grupo docker (se não for root)
            usermod -aG docker root || true
          fi
          
          # Docker Compose
          if ! command -v docker-compose >/dev/null 2>&1 && ! docker compose version >/dev/null 2>&1; then
            echo '🐳 Instalando Docker Compose...'
            curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
          fi
          
          # Nginx
          if ! command -v nginx >/dev/null 2>&1; then
            echo '🌐 Instalando Nginx...'
            wait_for_apt_lock
            apt-get install -y nginx
            systemctl start nginx
            systemctl enable nginx
          fi
          
          # Firewall básico
          ufw --force enable
          ufw allow ssh
          ufw allow 80
          ufw allow 443
          
          echo '✅ Sistema configurado!'
        "

    - name: 🔄 Atualizar Código
      run: |
        echo "🔄 Atualizando código da aplicação..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          # Criar diretório se não existe
          mkdir -p ${{ env.DEPLOY_DIR }}
          cd ${{ env.DEPLOY_DIR }}
          
          # Clone ou pull
          if [ ! -d .git ]; then
            echo '🆕 Clonando repositório...'
            git clone https://github.com/SEU_USUARIO/fuse-checkar2.git .
          else
            echo '📥 Atualizando repositório...'
            git fetch origin
            git reset --hard origin/main
            git pull origin main
          fi
          
          # Verificar arquivos críticos
          echo '🔍 Verificando arquivos críticos...'
          if [ -f 'index.html' ]; then
            echo '✅ index.html encontrado'
          else
            echo '❌ index.html não encontrado!'
          fi
          
          if [ -f 'backend/src/server.js' ]; then
            echo '✅ backend/src/server.js encontrado'
          else
            echo '❌ backend/src/server.js não encontrado!'
          fi
          
          if [ -f 'package.json' ]; then
            echo '✅ package.json encontrado'
          else
            echo '❌ package.json não encontrado!'
          fi
        "

    - name: 🐳 Build e Deploy com Docker
      run: |
        echo "🐳 Build e deploy da aplicação com Docker..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.DEPLOY_DIR }}
          
          echo '🏗️ Parando containers existentes...'
          docker-compose down --remove-orphans || docker compose down --remove-orphans || true
          
          echo '🧹 Limpando imagens antigas...'
          docker image prune -f
          
          echo '🏗️ Construindo nova imagem Docker...'
          docker-compose build --no-cache fuse-checkar2 || docker compose build --no-cache fuse-checkar2
          
          if [ \$? -eq 0 ]; then
            echo '✅ Build da imagem Docker concluído'
            docker images | grep fuse-checkar2
          else
            echo '❌ Erro no build da imagem Docker!'
            exit 1
          fi
          
          echo '📁 Criando diretórios necessários...'
          mkdir -p logs data
          chmod 755 logs data
        "

    - name: 🌐 Configurar Nginx
      run: |
        echo "🌐 Configurando Nginx..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} '
          echo "🌐 Criando configuração do Nginx..."
          
          # Criar configuração do Nginx
          cat > /etc/nginx/sites-available/fuse-checkar2 << EOF
server {
    listen 80;
    server_name 31.97.85.98 _;
    
    # Servir aplicação React+Express via Docker
    location / {
        proxy_pass http://127.0.0.1:3005;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Headers específicos para Docker
        proxy_set_header X-Forwarded-Host \$host;
        proxy_set_header X-Forwarded-Server \$host;
    }
    
    # Health check
    location /health {
        access_log off;
        return 200 "healthy";
        add_header Content-Type text/plain;
    }
}
EOF
          
          # Habilitar site e remover default
          ln -sf /etc/nginx/sites-available/fuse-checkar2 /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          
          # Testar configuração
          if /usr/sbin/nginx -t; then
            echo "✅ Configuração do Nginx válida"
            systemctl reload nginx || systemctl restart nginx
            echo "✅ Nginx reconfigurado"
          else
            echo "❌ Erro na configuração do Nginx"
            /usr/sbin/nginx -t
            exit 1
          fi
        '

    - name: 🚀 Iniciar Aplicação com Docker
      run: |
        echo "🚀 Iniciando aplicação com Docker..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.DEPLOY_DIR }}
          
          echo '🐳 Iniciando containers...'
          docker-compose up -d fuse-checkar2 || docker compose up -d fuse-checkar2
          
          echo '⏳ Aguardando inicialização...'
          sleep 20
          
          # Verificar se container está rodando
          if docker ps | grep -q '${{ env.APP_NAME }}-app.*Up'; then
            echo '✅ Container iniciado com sucesso'
            docker ps | grep '${{ env.APP_NAME }}-app'
            
            echo '📋 Status do container:'
            docker-compose ps fuse-checkar2 || docker compose ps fuse-checkar2
            
            echo '📋 Logs da aplicação:'
            docker-compose logs --tail=20 fuse-checkar2 || docker compose logs --tail=20 fuse-checkar2
          else
            echo '❌ Container não ficou online'
            echo '📋 Containers ativos:'
            docker ps -a
            echo '📋 Logs completos:'
            docker-compose logs fuse-checkar2 || docker compose logs fuse-checkar2
            exit 1
          fi
          
          echo '🔍 Verificando health check...'
          for i in {1..6}; do
            if docker exec ${{ env.APP_NAME }}-app wget -q --spider http://localhost:3005/api/health; then
              echo '✅ Health check passou'
              break
            else
              echo \"⏳ Health check tentativa \$i/6...\"
              sleep 10
            fi
            
            if [ \$i -eq 6 ]; then
              echo '❌ Health check falhou após 60 segundos'
              docker-compose logs --tail=50 fuse-checkar2 || docker compose logs --tail=50 fuse-checkar2
              exit 1
            fi
          done
        "

    - name: 🔍 Verificação Final
      run: |
        echo "🔍 Verificação final do deploy..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.DEPLOY_DIR }}
          
          echo '=== Status dos Containers ==='
          docker-compose ps || docker compose ps
          
          echo ''
          echo '=== Informações do Container ==='
          docker inspect ${{ env.APP_NAME }}-app --format='{{.State.Status}}' 2>/dev/null || echo 'Container não encontrado'
          
          echo ''
          echo '=== Teste de Conectividade ==='
          for i in {1..5}; do
            if curl -f -s http://localhost:3005/api/health >/dev/null 2>&1; then
              echo '✅ API responde na porta 3005'
              curl -s http://localhost:3005/api/health
              break
            else
              echo \"⏳ Tentativa \$i/5...\"
              sleep 3
            fi
            
            if [ \$i -eq 5 ]; then
              echo '❌ API não responde após 15 segundos'
              docker-compose logs --tail=30 fuse-checkar2 || docker compose logs --tail=30 fuse-checkar2
            fi
          done
          
          echo ''
          echo '=== Teste via Nginx ==='
          echo '🔍 Testando Nginx diretamente...'
          if curl -f -s http://localhost/ >/dev/null 2>&1; then
            echo '✅ Nginx proxy funcionando'
            echo '📋 Resposta do Nginx:'
            curl -s http://localhost/ | head -5
          else
            echo '❌ Problema no Nginx proxy'
            echo '📋 Status do Nginx:'
            systemctl status nginx --no-pager -l || true
            echo '📋 Logs do Nginx:'
            tail -10 /var/log/nginx/error.log 2>/dev/null || echo 'Sem logs de erro'
          fi
          
          echo ''
          echo '=== Recursos Docker ==='
          echo \"Imagem Docker: \$(docker images | grep '${{ env.APP_NAME }}' >/dev/null && echo '✅ OK' || echo '❌ MISSING')\"
          echo \"Container: \$(docker ps | grep '${{ env.APP_NAME }}-app' | grep -q Up && echo '✅ RUNNING' || echo '❌ STOPPED')\"
          echo \"Docker Compose: \$([ -f '${{ env.DEPLOY_DIR }}/docker-compose.yml' ] && echo '✅ OK' || echo '❌ MISSING')\"
          echo \"Dockerfile: \$([ -f '${{ env.DEPLOY_DIR }}/Dockerfile' ] && echo '✅ OK' || echo '❌ MISSING')\"
          
          echo ''
          echo '=== Uso de Recursos ==='
          if docker stats --no-stream --format 'table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}' | grep -q '${{ env.APP_NAME }}-app'; then
            docker stats --no-stream --format 'table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}' | grep '${{ env.APP_NAME }}-app'
          else
            echo 'Estatísticas não disponíveis'
          fi
        "

    - name: 📊 Relatório Final
      if: always()
      run: |
        echo "📊 RELATÓRIO DO DEPLOY"
        echo "====================="
        echo "Aplicação: Fuse Checkar2"
        echo "Commit: ${{ github.sha }}"
        echo "Timestamp: $(date)"
        echo "VPS: ${{ env.VPS_HOST }}"
        echo ""
        echo "🎯 Aplicação: http://${{ env.VPS_HOST }}/"
        echo "🔧 API Health: http://${{ env.VPS_HOST }}/api/health"
        echo ""
        echo "✅ Deploy concluído!"

    - name: 🎉 Deploy Concluído
      run: |
        echo "🎉 DEPLOY FUSE CHECKAR2 REALIZADO COM SUCESSO!"
        echo "🚀 Sistema: FUNCIONANDO"
        echo "💻 Frontend: React + Vite"
        echo "⚙️ Backend: Node.js + Express"
        echo "🌐 Proxy: Nginx"
        echo ""
        echo "Acesse: http://${{ env.VPS_HOST }}/"